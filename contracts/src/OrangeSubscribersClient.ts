/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "bootstrap(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintGiftNFT(axfer,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "redeemGiftNFT(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "subscribe(axfer,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLatestTimestamp()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "CALL",
    "delete_application": "CALL"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "oraAsaId": {
          "type": "uint64",
          "key": "oraAsaId"
        },
        "giftSubscription30day": {
          "type": "uint64",
          "key": "gs30d"
        },
        "giftSubscriptionYear": {
          "type": "uint64",
          "key": "gsy"
        },
        "subscriptionPrice30day": {
          "type": "uint64",
          "key": "sp30d"
        },
        "subscriptionPriceYear": {
          "type": "uint64",
          "key": "spy"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg4LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uICpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfRGVsZXRlQXBwbGljYXRpb24KCipOT1RfSU1QTEVNRU5URUQ6CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6NDIKCS8vIHRoaXMuc3Vic2NyaXB0aW9uUHJpY2UzMGRheS52YWx1ZSA9IERFRkFVTFRfMzBEQVlfUFJJQ0UKCWJ5dGUgMHg3MzcwMzMzMDY0IC8vICJzcDMwZCIKCWludCAxMDAwMDAwMDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6NDMKCS8vIHRoaXMuc3Vic2NyaXB0aW9uUHJpY2VZZWFyLnZhbHVlID0gREVGQVVMVF9ZRUFSX1BSSUNFCglieXRlIDB4NzM3MDc5IC8vICJzcHkiCglpbnQgMTIwMDAwMDAwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo0NAoJLy8gdGhpcy5tYW5hZ2VyLnZhbHVlID0gZ2xvYmFscy5jcmVhdG9yQWRkcmVzcwoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJZ2xvYmFsIENyZWF0b3JBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiB1cGRhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gdXBkYXRlQXBwbGljYXRpb24oKTogdm9pZAp1cGRhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjQ5CgkvLyB2ZXJpZnlBcHBDYWxsVHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5tYW5hZ2VyLnZhbHVlIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKTogdm9pZApkZWxldGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjU0CgkvLyB2ZXJpZnlBcHBDYWxsVHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5tYW5hZ2VyLnZhbHVlIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBib290c3RyYXAodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9ib290c3RyYXA6CgkvLyBvcmFBc2FJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBib290c3RyYXAodWludDY0KXZvaWQKCWNhbGxzdWIgYm9vdHN0cmFwCglpbnQgMQoJcmV0dXJuCgovLyBib290c3RyYXAob3JhQXNhSWQ6IEFzc2V0SUQpOiB2b2lkCmJvb3RzdHJhcDoKCXByb3RvIDEgMAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjU4CgkvLyBhc3NlcnQodGhpcy5vcmFBc2FJZC52YWx1ZSA9PT0gQXNzZXRJRC56ZXJvSW5kZXgsICdBbHJlYWR5IGJvb3RzdHJhcHBlZCcpCglieXRlIDB4NmY3MjYxNDE3MzYxNDk2NCAvLyAib3JhQXNhSWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT09CgoJLy8gQWxyZWFkeSBib290c3RyYXBwZWQKCWFzc2VydAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjU5CgkvLyBhc3NlcnQob3JhQXNhSWQgIT09IEFzc2V0SUQuemVyb0luZGV4LCAnQVNBIG11c3QgYmUgbm9uLXplcm8nKQoJZnJhbWVfZGlnIC0xIC8vIG9yYUFzYUlkOiBBc3NldElECglpbnQgMAoJIT0KCgkvLyBBU0EgbXVzdCBiZSBub24temVybwoJYXNzZXJ0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6NjAKCS8vIHZlcmlmeUFwcENhbGxUeG4odGhpcy50eG4sIHsgc2VuZGVyOiB0aGlzLm1hbmFnZXIudmFsdWUgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6NjIKCS8vIHRoaXMub3JhQXNhSWQudmFsdWUgPSBvcmFBc2FJZAoJYnl0ZSAweDZmNzI2MTQxNzM2MTQ5NjQgLy8gIm9yYUFzYUlkIgoJZnJhbWVfZGlnIC0xIC8vIG9yYUFzYUlkOiBBc3NldElECglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjY1CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IG9yYUFzYUlkLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo2NgoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjY3CgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo2OAoJLy8geGZlckFzc2V0OiBvcmFBc2FJZAoJZnJhbWVfZGlnIC0xIC8vIG9yYUFzYUlkOiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo3MQoJLy8gdGhpcy5jcmVhdGVHaWZ0TkZUcygpCgljYWxsc3ViIGNyZWF0ZUdpZnRORlRzCglyZXRzdWIKCi8vIGNyZWF0ZUdpZnRORlRzKCk6IHZvaWQKY3JlYXRlR2lmdE5GVHM6Cglwcm90byAwIDAKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo3NQoJLy8gdmVyaWZ5QXBwQ2FsbFR4bih0aGlzLnR4biwgeyBzZW5kZXI6IHRoaXMubWFuYWdlci52YWx1ZSB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo3NwoJLy8gYXNzZXJ0KHRoaXMuZ2lmdFN1YnNjcmlwdGlvbjMwZGF5LnZhbHVlID09PSBBc3NldElELnplcm9JbmRleCwgJ0dpZnQgTkZUcyBhbHJlYWR5IGNyZWF0ZWQnKQoJYnl0ZSAweDY3NzMzMzMwNjQgLy8gImdzMzBkIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCgk9PQoKCS8vIEdpZnQgTkZUcyBhbHJlYWR5IGNyZWF0ZWQKCWFzc2VydAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjc4CgkvLyBhc3NlcnQodGhpcy5naWZ0U3Vic2NyaXB0aW9uWWVhci52YWx1ZSA9PT0gQXNzZXRJRC56ZXJvSW5kZXgsICdHaWZ0IE5GVHMgYWxyZWFkeSBjcmVhdGVkJykKCWJ5dGUgMHg2NzczNzkgLy8gImdzeSIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMAoJPT0KCgkvLyBHaWZ0IE5GVHMgYWxyZWFkeSBjcmVhdGVkCglhc3NlcnQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo4MAoJLy8gdGhpcy5naWZ0U3Vic2NyaXB0aW9uMzBkYXkudmFsdWUgPSBzZW5kQXNzZXRDcmVhdGlvbih7CgkvLyAgICAgICBjb25maWdBc3NldE5hbWU6ICdPUkEgMzAgRGF5IFN1YnNjcmlwdGlvbicsCgkvLyAgICAgICBjb25maWdBc3NldFVuaXROYW1lOiAnT1JBMzBkYXknLAoJLy8gICAgICAgY29uZmlnQXNzZXRUb3RhbDogVE9UQUxfU1VQUExZLAoJLy8gICAgICAgY29uZmlnQXNzZXREZWNpbWFsczogMCwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TWFuYWdlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGNvbmZpZ0Fzc2V0RnJlZXplOiBBZGRyZXNzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXRDbGF3YmFjazogQWRkcmVzcy56ZXJvQWRkcmVzcywKCS8vICAgICAgIGNvbmZpZ0Fzc2V0VVJMOiBJUEZTX1VSTCwKCS8vICAgICAgIGZlZTogMCwKCS8vICAgICB9KQoJYnl0ZSAweDY3NzMzMzMwNjQgLy8gImdzMzBkIgoJaXR4bl9iZWdpbgoJaW50IGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo4MQoJLy8gY29uZmlnQXNzZXROYW1lOiAnT1JBIDMwIERheSBTdWJzY3JpcHRpb24nCglieXRlIDB4NGY1MjQxMjAzMzMwMjA0NDYxNzkyMDUzNzU2MjczNjM3MjY5NzA3NDY5NmY2ZSAvLyAiT1JBIDMwIERheSBTdWJzY3JpcHRpb24iCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjgyCgkvLyBjb25maWdBc3NldFVuaXROYW1lOiAnT1JBMzBkYXknCglieXRlIDB4NGY1MjQxMzMzMDY0NjE3OSAvLyAiT1JBMzBkYXkiCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo4MwoJLy8gY29uZmlnQXNzZXRUb3RhbDogVE9UQUxfU1VQUExZCglpbnQgMTAwMDAwMDAwMDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjg0CgkvLyBjb25maWdBc3NldERlY2ltYWxzOiAwCglpbnQgMAoJaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6ODUKCS8vIGNvbmZpZ0Fzc2V0TWFuYWdlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6ODYKCS8vIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6ODcKCS8vIGNvbmZpZ0Fzc2V0RnJlZXplOiBBZGRyZXNzLnplcm9BZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRGcmVlemUKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo4OAoJLy8gY29uZmlnQXNzZXRDbGF3YmFjazogQWRkcmVzcy56ZXJvQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo4OQoJLy8gY29uZmlnQXNzZXRVUkw6IElQRlNfVVJMCglieXRlICJ0ZW1wbGF0ZS1pcGZzOi8ve2lwZnNjaWQ6MTpyYXc6cmVzZXJ2ZTpzaGEyLTI1Nn0iCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6OTAKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBDcmVhdGVkQXNzZXRJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo5MwoJLy8gdGhpcy5naWZ0U3Vic2NyaXB0aW9uWWVhci52YWx1ZSA9IHNlbmRBc3NldENyZWF0aW9uKHsKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogJ09SQSAxIFllYXIgU3Vic2NyaXB0aW9uJywKCS8vICAgICAgIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICdPUkExWWVhcicsCgkvLyAgICAgICBjb25maWdBc3NldFRvdGFsOiBUT1RBTF9TVVBQTFksCgkvLyAgICAgICBjb25maWdBc3NldERlY2ltYWxzOiAwLAoJLy8gICAgICAgY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXRSZXNlcnZlOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXRGcmVlemU6IEFkZHJlc3MuemVyb0FkZHJlc3MsCgkvLyAgICAgICBjb25maWdBc3NldENsYXdiYWNrOiBBZGRyZXNzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXRVUkw6IElQRlNfVVJMLAoJLy8gICAgICAgZmVlOiAwLAoJLy8gICAgIH0pCglieXRlIDB4Njc3Mzc5IC8vICJnc3kiCglpdHhuX2JlZ2luCglpbnQgYWNmZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjk0CgkvLyBjb25maWdBc3NldE5hbWU6ICdPUkEgMSBZZWFyIFN1YnNjcmlwdGlvbicKCWJ5dGUgMHg0ZjUyNDEyMDMxMjA1OTY1NjE3MjIwNTM3NTYyNzM2MzcyNjk3MDc0Njk2ZjZlIC8vICJPUkEgMSBZZWFyIFN1YnNjcmlwdGlvbiIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6OTUKCS8vIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICdPUkExWWVhcicKCWJ5dGUgMHg0ZjUyNDEzMTU5NjU2MTcyIC8vICJPUkExWWVhciIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjk2CgkvLyBjb25maWdBc3NldFRvdGFsOiBUT1RBTF9TVVBQTFkKCWludCAxMDAwMDAwMDAwMAoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6OTcKCS8vIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDAKCWludCAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo5OAoJLy8gY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czo5OQoJLy8gY29uZmlnQXNzZXRSZXNlcnZlOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMDAKCS8vIGNvbmZpZ0Fzc2V0RnJlZXplOiBBZGRyZXNzLnplcm9BZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRGcmVlemUKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMDEKCS8vIGNvbmZpZ0Fzc2V0Q2xhd2JhY2s6IEFkZHJlc3MuemVyb0FkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldENsYXdiYWNrCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTAyCgkvLyBjb25maWdBc3NldFVSTDogSVBGU19VUkwKCWJ5dGUgInRlbXBsYXRlLWlwZnM6Ly97aXBmc2NpZDoxOnJhdzpyZXNlcnZlOnNoYTItMjU2fSIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMDMKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBDcmVhdGVkQXNzZXRJRAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gbWludEdpZnRORlQoYXhmZXIsdWludDgpdm9pZAoqYWJpX3JvdXRlX21pbnRHaWZ0TkZUOgoJLy8gc3Vic2NyaXB0aW9uVHlwZTogdWludDgKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMQoJPT0KCWFzc2VydAoJYnRvaQoKCS8vIG9yYVBheW1lbnQ6IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgbWludEdpZnRORlQoYXhmZXIsdWludDgpdm9pZAoJY2FsbHN1YiBtaW50R2lmdE5GVAoJaW50IDEKCXJldHVybgoKLy8gbWludEdpZnRORlQob3JhUGF5bWVudDogQXNzZXRUcmFuc2ZlclR4biwgc3Vic2NyaXB0aW9uVHlwZTogdWludDgpOiB2b2lkCm1pbnRHaWZ0TkZUOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjEwOAoJLy8gYXNzZXJ0KHN1YnNjcmlwdGlvblR5cGUgPT09IERBWVNfMzAgfHwgc3Vic2NyaXB0aW9uVHlwZSA9PT0gWUVBUiwgJ0ludmFsaWQgc3Vic2NyaXB0aW9uIHR5cGUnKQoJZnJhbWVfZGlnIC0yIC8vIHN1YnNjcmlwdGlvblR5cGU6IHVpbnQ4CglpbnQgMQoJPT0KCWR1cAoJYm56ICpza2lwX29yMAoJZnJhbWVfZGlnIC0yIC8vIHN1YnNjcmlwdGlvblR5cGU6IHVpbnQ4CglpbnQgMgoJPT0KCXx8Cgoqc2tpcF9vcjA6CgkvLyBJbnZhbGlkIHN1YnNjcmlwdGlvbiB0eXBlCglhc3NlcnQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMTAKCS8vIHByaWNlID0gc3Vic2NyaXB0aW9uVHlwZSA9PT0gREFZU18zMCA/IHRoaXMuc3Vic2NyaXB0aW9uUHJpY2UzMGRheS52YWx1ZSA6IHRoaXMuc3Vic2NyaXB0aW9uUHJpY2VZZWFyLnZhbHVlCglmcmFtZV9kaWcgLTIgLy8gc3Vic2NyaXB0aW9uVHlwZTogdWludDgKCWludCAxCgk9PQoJYnogKnRlcm5hcnkxX2ZhbHNlCglieXRlIDB4NzM3MDMzMzA2NCAvLyAic3AzMGQiCglhcHBfZ2xvYmFsX2dldAoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglieXRlIDB4NzM3MDc5IC8vICJzcHkiCglhcHBfZ2xvYmFsX2dldAoKKnRlcm5hcnkxX2VuZDoKCWZyYW1lX2J1cnkgMCAvLyBwcmljZTogdWludDY0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTEyCgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKG9yYVBheW1lbnQsIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy5vcmFBc2FJZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBwcmljZSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIG9yYVBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gb3JhUGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gb3JhUGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NmY3MjYxNDE3MzYxNDk2NCAvLyAib3JhQXNhSWQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG9yYVBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgMCAvLyBwcmljZTogdWludDY0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTE5CgkvLyBzdWJzY3JpcHRpb25Bc3NldElkID0KCS8vICAgICAgIHN1YnNjcmlwdGlvblR5cGUgPT09IERBWVNfMzAgPyB0aGlzLmdpZnRTdWJzY3JpcHRpb24zMGRheS52YWx1ZSA6IHRoaXMuZ2lmdFN1YnNjcmlwdGlvblllYXIudmFsdWUKCWZyYW1lX2RpZyAtMiAvLyBzdWJzY3JpcHRpb25UeXBlOiB1aW50OAoJaW50IDEKCT09CglieiAqdGVybmFyeTNfZmFsc2UKCWJ5dGUgMHg2NzczMzMzMDY0IC8vICJnczMwZCIKCWFwcF9nbG9iYWxfZ2V0CgliICp0ZXJuYXJ5M19lbmQKCip0ZXJuYXJ5M19mYWxzZToKCWJ5dGUgMHg2NzczNzkgLy8gImdzeSIKCWFwcF9nbG9iYWxfZ2V0CgoqdGVybmFyeTNfZW5kOgoJZnJhbWVfYnVyeSAxIC8vIHN1YnNjcmlwdGlvbkFzc2V0SWQ6IHVpbnQ2NAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjEyMgoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy50eG4uc2VuZGVyLmlzT3B0ZWRJblRvQXNzZXQoc3Vic2NyaXB0aW9uQXNzZXRJZCksCgkvLyAgICAgICAnVXNlciBub3Qgb3B0ZWQgaW50byBhc3NldCBpZDogJyArIHN1YnNjcmlwdGlvbkFzc2V0SWQKCS8vICAgICApCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgMSAvLyBzdWJzY3JpcHRpb25Bc3NldElkOiB1aW50NjQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMjcKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAxLAoJLy8gICAgICAgeGZlckFzc2V0OiBzdWJzY3JpcHRpb25Bc3NldElkLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMjgKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTI5CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjEzMAoJLy8gYXNzZXRBbW91bnQ6IDEKCWludCAxCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTMxCgkvLyB4ZmVyQXNzZXQ6IHN1YnNjcmlwdGlvbkFzc2V0SWQKCWZyYW1lX2RpZyAxIC8vIHN1YnNjcmlwdGlvbkFzc2V0SWQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHJlZGVlbUdpZnRORlQoYXhmZXIpdm9pZAoqYWJpX3JvdXRlX3JlZGVlbUdpZnRORlQ6CgkvLyBnaWZ0UGF5bWVudDogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSByZWRlZW1HaWZ0TkZUKGF4ZmVyKXZvaWQKCWNhbGxzdWIgcmVkZWVtR2lmdE5GVAoJaW50IDEKCXJldHVybgoKLy8gcmVkZWVtR2lmdE5GVChnaWZ0UGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQKcmVkZWVtR2lmdE5GVDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDMKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxMzYKCS8vIGFzc2VydCgKCS8vICAgICAgIGdpZnRQYXltZW50LnhmZXJBc3NldCA9PT0gdGhpcy5naWZ0U3Vic2NyaXB0aW9uMzBkYXkudmFsdWUgfHwKCS8vICAgICAgICAgZ2lmdFBheW1lbnQueGZlckFzc2V0ID09PSB0aGlzLmdpZnRTdWJzY3JpcHRpb25ZZWFyLnZhbHVlLAoJLy8gICAgICAgJ0ludmFsaWQgZ2lmdCBzdWJzY3JpcHRpb24gTkZUJwoJLy8gICAgICkKCWZyYW1lX2RpZyAtMSAvLyBnaWZ0UGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4Njc3MzMzMzA2NCAvLyAiZ3MzMGQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWR1cAoJYm56ICpza2lwX29yMQoJZnJhbWVfZGlnIC0xIC8vIGdpZnRQYXltZW50OiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWJ5dGUgMHg2NzczNzkgLy8gImdzeSIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJfHwKCipza2lwX29yMToKCS8vIEludmFsaWQgZ2lmdCBzdWJzY3JpcHRpb24gTkZUCglhc3NlcnQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxNDIKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4oZ2lmdFBheW1lbnQsIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFzc2V0QW1vdW50OiAxLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gZ2lmdFBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gZ2lmdFBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTEgLy8gZ2lmdFBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpbnQgMQoJPT0KCWFzc2VydAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjE0OAoJLy8gZXhpc3RpbmdTdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmlwdGlvbnModGhpcy50eG4uc2VuZGVyKS5leGlzdHMKCS8vICAgICAgID8gdGhpcy5zdWJzY3JpcHRpb25zKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCS8vICAgICAgIDogMAoJdHhuIFNlbmRlcgoJYm94X2xlbgoJc3dhcAoJcG9wCglieiAqdGVybmFyeTVfZmFsc2UKCXR4biBTZW5kZXIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJYiAqdGVybmFyeTVfZW5kCgoqdGVybmFyeTVfZmFsc2U6CglpbnQgMAoKKnRlcm5hcnk1X2VuZDoKCWZyYW1lX2J1cnkgMCAvLyBleGlzdGluZ1N1YnNjcmlwdGlvbjogdWludDY0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTUyCgkvLyBjdXJyZW50RW5kID0gZXhpc3RpbmdTdWJzY3JpcHRpb24gPCBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCA/IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wIDogZXhpc3RpbmdTdWJzY3JpcHRpb24KCWZyYW1lX2RpZyAwIC8vIGV4aXN0aW5nU3Vic2NyaXB0aW9uOiB1aW50NjQKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCTwKCWJ6ICp0ZXJuYXJ5N19mYWxzZQoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJYiAqdGVybmFyeTdfZW5kCgoqdGVybmFyeTdfZmFsc2U6CglmcmFtZV9kaWcgMCAvLyBleGlzdGluZ1N1YnNjcmlwdGlvbjogdWludDY0CgoqdGVybmFyeTdfZW5kOgoJZnJhbWVfYnVyeSAxIC8vIGN1cnJlbnRFbmQ6IHVpbnQ2NAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjE1NAoJLy8gZHVyID0gZ2lmdFBheW1lbnQueGZlckFzc2V0ID09PSB0aGlzLmdpZnRTdWJzY3JpcHRpb24zMGRheS52YWx1ZSA/IERBWVNfMzBfRFVSIDogWUVBUl9EVVIKCWZyYW1lX2RpZyAtMSAvLyBnaWZ0UGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4Njc3MzMzMzA2NCAvLyAiZ3MzMGQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWJ6ICp0ZXJuYXJ5OV9mYWxzZQoJaW50IDI1OTIwMDAKCWIgKnRlcm5hcnk5X2VuZAoKKnRlcm5hcnk5X2ZhbHNlOgoJaW50IDMxNTM2MDAwCgoqdGVybmFyeTlfZW5kOgoJZnJhbWVfYnVyeSAyIC8vIGR1cjogdWludDY0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTU1CgkvLyBuZXdFbmQgPSBjdXJyZW50RW5kICsgZHVyCglmcmFtZV9kaWcgMSAvLyBjdXJyZW50RW5kOiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIGR1cjogdWludDY0CgkrCglmcmFtZV9idXJ5IDMgLy8gbmV3RW5kOiB1aW50NjQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxNTcKCS8vIHRoaXMuc3Vic2NyaXB0aW9ucyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gbmV3RW5kCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgMyAvLyBuZXdFbmQ6IHVpbnQ2NAoJaXRvYgoJYm94X3B1dAoJcmV0c3ViCgovLyBzdWJzY3JpYmUoYXhmZXIsdWludDgpdm9pZAoqYWJpX3JvdXRlX3N1YnNjcmliZToKCS8vIHN1YnNjcmlwdGlvblR5cGU6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBvcmFQYXltZW50OiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgYXhmZXIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHN1YnNjcmliZShheGZlcix1aW50OCl2b2lkCgljYWxsc3ViIHN1YnNjcmliZQoJaW50IDEKCXJldHVybgoKLy8gc3Vic2NyaWJlKG9yYVBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4sIHN1YnNjcmlwdGlvblR5cGU6IHVpbnQ4KTogdm9pZApzdWJzY3JpYmU6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiA0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTYxCgkvLyBhc3NlcnQoc3Vic2NyaXB0aW9uVHlwZSA9PT0gREFZU18zMCB8fCBzdWJzY3JpcHRpb25UeXBlID09PSBZRUFSLCAnSW52YWxpZCBzdWJzY3JpcHRpb24gdHlwZScpCglmcmFtZV9kaWcgLTIgLy8gc3Vic2NyaXB0aW9uVHlwZTogdWludDgKCWludCAxCgk9PQoJZHVwCglibnogKnNraXBfb3IyCglmcmFtZV9kaWcgLTIgLy8gc3Vic2NyaXB0aW9uVHlwZTogdWludDgKCWludCAyCgk9PQoJfHwKCipza2lwX29yMjoKCS8vIEludmFsaWQgc3Vic2NyaXB0aW9uIHR5cGUKCWFzc2VydAoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjE2MwoJLy8gcHJpY2UgPSBzdWJzY3JpcHRpb25UeXBlID09PSBEQVlTXzMwID8gdGhpcy5zdWJzY3JpcHRpb25QcmljZTMwZGF5LnZhbHVlIDogdGhpcy5zdWJzY3JpcHRpb25QcmljZVllYXIudmFsdWUKCWZyYW1lX2RpZyAtMiAvLyBzdWJzY3JpcHRpb25UeXBlOiB1aW50OAoJaW50IDEKCT09CglieiAqdGVybmFyeTExX2ZhbHNlCglieXRlIDB4NzM3MDMzMzA2NCAvLyAic3AzMGQiCglhcHBfZ2xvYmFsX2dldAoJYiAqdGVybmFyeTExX2VuZAoKKnRlcm5hcnkxMV9mYWxzZToKCWJ5dGUgMHg3MzcwNzkgLy8gInNweSIKCWFwcF9nbG9iYWxfZ2V0CgoqdGVybmFyeTExX2VuZDoKCWZyYW1lX2J1cnkgMCAvLyBwcmljZTogdWludDY0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTY1CgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKG9yYVBheW1lbnQsIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy5vcmFBc2FJZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBwcmljZSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIG9yYVBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gb3JhUGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gb3JhUGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NmY3MjYxNDE3MzYxNDk2NCAvLyAib3JhQXNhSWQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG9yYVBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgMCAvLyBwcmljZTogdWludDY0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTcyCgkvLyBleGlzdGluZ1N1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9ucyh0aGlzLnR4bi5zZW5kZXIpLmV4aXN0cwoJLy8gICAgICAgPyB0aGlzLnN1YnNjcmlwdGlvbnModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJLy8gICAgICAgOiAwCgl0eG4gU2VuZGVyCglib3hfbGVuCglzd2FwCglwb3AKCWJ6ICp0ZXJuYXJ5MTNfZmFsc2UKCXR4biBTZW5kZXIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJYiAqdGVybmFyeTEzX2VuZAoKKnRlcm5hcnkxM19mYWxzZToKCWludCAwCgoqdGVybmFyeTEzX2VuZDoKCWZyYW1lX2J1cnkgMSAvLyBleGlzdGluZ1N1YnNjcmlwdGlvbjogdWludDY0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTc2CgkvLyBjdXJyZW50RW5kID0gZXhpc3RpbmdTdWJzY3JpcHRpb24gPCBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCA/IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wIDogZXhpc3RpbmdTdWJzY3JpcHRpb24KCWZyYW1lX2RpZyAxIC8vIGV4aXN0aW5nU3Vic2NyaXB0aW9uOiB1aW50NjQKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCTwKCWJ6ICp0ZXJuYXJ5MTVfZmFsc2UKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWIgKnRlcm5hcnkxNV9lbmQKCip0ZXJuYXJ5MTVfZmFsc2U6CglmcmFtZV9kaWcgMSAvLyBleGlzdGluZ1N1YnNjcmlwdGlvbjogdWludDY0CgoqdGVybmFyeTE1X2VuZDoKCWZyYW1lX2J1cnkgMiAvLyBjdXJyZW50RW5kOiB1aW50NjQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxNzgKCS8vIGR1ciA9IHN1YnNjcmlwdGlvblR5cGUgPT09IERBWVNfMzAgPyBEQVlTXzMwX0RVUiA6IFlFQVJfRFVSCglmcmFtZV9kaWcgLTIgLy8gc3Vic2NyaXB0aW9uVHlwZTogdWludDgKCWludCAxCgk9PQoJYnogKnRlcm5hcnkxN19mYWxzZQoJaW50IDI1OTIwMDAKCWIgKnRlcm5hcnkxN19lbmQKCip0ZXJuYXJ5MTdfZmFsc2U6CglpbnQgMzE1MzYwMDAKCip0ZXJuYXJ5MTdfZW5kOgoJZnJhbWVfYnVyeSAzIC8vIGR1cjogdWludDY0CgoJLy8gc3JjL09yYW5nZVN1YnNjcmliZXJzLmFsZ28udHM6MTc5CgkvLyBuZXdFbmQgPSBjdXJyZW50RW5kICsgZHVyCglmcmFtZV9kaWcgMiAvLyBjdXJyZW50RW5kOiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIGR1cjogdWludDY0CgkrCglmcmFtZV9idXJ5IDQgLy8gbmV3RW5kOiB1aW50NjQKCgkvLyBzcmMvT3JhbmdlU3Vic2NyaWJlcnMuYWxnby50czoxODEKCS8vIHRoaXMuc3Vic2NyaXB0aW9ucyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gbmV3RW5kCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgNCAvLyBuZXdFbmQ6IHVpbnQ2NAoJaXRvYgoJYm94X3B1dAoJcmV0c3ViCgovLyBnZXRMYXRlc3RUaW1lc3RhbXAoKXVpbnQ2NAoqYWJpX3JvdXRlX2dldExhdGVzdFRpbWVzdGFtcDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBnZXRMYXRlc3RUaW1lc3RhbXAoKXVpbnQ2NAoJY2FsbHN1YiBnZXRMYXRlc3RUaW1lc3RhbXAKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRMYXRlc3RUaW1lc3RhbXAoKTogdWludDY0CmdldExhdGVzdFRpbWVzdGFtcDoKCXByb3RvIDAgMQoKCS8vIHNyYy9PcmFuZ2VTdWJzY3JpYmVycy5hbGdvLnRzOjE4NQoJLy8gcmV0dXJuIGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wOwoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6Cgl0eG4gTnVtQXBwQXJncwoJYnogKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKKmNhbGxfTm9PcDoKCW1ldGhvZCAiYm9vdHN0cmFwKHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJtaW50R2lmdE5GVChheGZlcix1aW50OCl2b2lkIgoJbWV0aG9kICJyZWRlZW1HaWZ0TkZUKGF4ZmVyKXZvaWQiCgltZXRob2QgInN1YnNjcmliZShheGZlcix1aW50OCl2b2lkIgoJbWV0aG9kICJnZXRMYXRlc3RUaW1lc3RhbXAoKXVpbnQ2NCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYm9vdHN0cmFwICphYmlfcm91dGVfbWludEdpZnRORlQgKmFiaV9yb3V0ZV9yZWRlZW1HaWZ0TkZUICphYmlfcm91dGVfc3Vic2NyaWJlICphYmlfcm91dGVfZ2V0TGF0ZXN0VGltZXN0YW1wCgllcnIKCipjcmVhdGVfVXBkYXRlQXBwbGljYXRpb246CgllcnIKCipjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uOgoJdHhuIE51bUFwcEFyZ3MKCWJ6ICphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb24KCW1ldGhvZCAidXBkYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uCgllcnIKCipjcmVhdGVfRGVsZXRlQXBwbGljYXRpb246CgllcnIKCipjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJdHhuIE51bUFwcEFyZ3MKCWJ6ICphYmlfcm91dGVfZGVsZXRlQXBwbGljYXRpb24KCW1ldGhvZCAiZGVsZXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "OrangeSubscribers",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "oraAsaId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mintGiftNFT",
        "args": [
          {
            "name": "oraPayment",
            "type": "axfer"
          },
          {
            "name": "subscriptionType",
            "type": "uint8"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "redeemGiftNFT",
        "args": [
          {
            "name": "giftPayment",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "subscribe",
        "args": [
          {
            "name": "oraPayment",
            "type": "axfer"
          },
          {
            "name": "subscriptionType",
            "type": "uint8"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getLatestTimestamp",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the OrangeSubscribers smart contract.
 */
export type OrangeSubscribers = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bootstrap(uint64)void' | 'bootstrap', {
      argsObj: {
        oraAsaId: bigint | number
      }
      argsTuple: [oraAsaId: bigint | number]
      returns: void
    }>
    & Record<'mintGiftNFT(axfer,uint8)void' | 'mintGiftNFT', {
      argsObj: {
        oraPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        subscriptionType: number
      }
      argsTuple: [oraPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, subscriptionType: number]
      returns: void
    }>
    & Record<'redeemGiftNFT(axfer)void' | 'redeemGiftNFT', {
      argsObj: {
        giftPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [giftPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'subscribe(axfer,uint8)void' | 'subscribe', {
      argsObj: {
        oraPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        subscriptionType: number
      }
      argsTuple: [oraPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, subscriptionType: number]
      returns: void
    }>
    & Record<'getLatestTimestamp()uint64' | 'getLatestTimestamp', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'manager'?: BinaryState
      'oraAsaId'?: IntegerState
      'gs30d'?: IntegerState
      'gsy'?: IntegerState
      'sp30d'?: IntegerState
      'spy'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type OrangeSubscribersSig = keyof OrangeSubscribers['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends OrangeSubscribersSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the OrangeSubscribers smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends OrangeSubscribersSig> = OrangeSubscribers['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OrangeSubscribers smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OrangeSubscribersSig> = OrangeSubscribers['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type OrangeSubscribersCreateCalls = (typeof OrangeSubscribersCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type OrangeSubscribersCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type OrangeSubscribersUpdateCalls = (typeof OrangeSubscribersCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type OrangeSubscribersUpdateCallParams =
  | TypedCallParams<undefined>
  | TypedCallParams<'updateApplication()void'>
/**
 * A factory for available 'delete' calls
 */
export type OrangeSubscribersDeleteCalls = (typeof OrangeSubscribersCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type OrangeSubscribersDeleteCallParams =
  | TypedCallParams<undefined>
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type OrangeSubscribersDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: OrangeSubscribersCreateCalls) => OrangeSubscribersCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: OrangeSubscribersUpdateCalls) => OrangeSubscribersUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: OrangeSubscribersDeleteCalls) => OrangeSubscribersDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class OrangeSubscribersCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the OrangeSubscribers smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs a create call for the OrangeSubscribers smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the OrangeSubscribers smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs an update call for the OrangeSubscribers smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the OrangeSubscribers smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs a delete call for the OrangeSubscribers smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.oraAsaId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintGiftNFT(axfer,uint8)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintGiftNft(args: MethodArgs<'mintGiftNFT(axfer,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintGiftNFT(axfer,uint8)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.oraPayment, args.subscriptionType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the redeemGiftNFT(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static redeemGiftNft(args: MethodArgs<'redeemGiftNFT(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'redeemGiftNFT(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.giftPayment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the subscribe(axfer,uint8)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static subscribe(args: MethodArgs<'subscribe(axfer,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'subscribe(axfer,uint8)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.oraPayment, args.subscriptionType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getLatestTimestamp()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLatestTimestamp(args: MethodArgs<'getLatestTimestamp()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getLatestTimestamp()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the OrangeSubscribers smart contract
 */
export class OrangeSubscribersClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `OrangeSubscribersClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof OrangeSubscribers['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the OrangeSubscribers smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: OrangeSubscribersDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(OrangeSubscribersCallFactory.create)
    const updateArgs = params.updateCall?.(OrangeSubscribersCallFactory.update)
    const deleteArgs = params.deleteCall?.(OrangeSubscribersCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the OrangeSubscribers smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
      /**
       * Creates a new instance of the OrangeSubscribers smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(OrangeSubscribersCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the OrangeSubscribers smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
      /**
       * Updates an existing instance of the OrangeSubscribers smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(OrangeSubscribersCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the OrangeSubscribers smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
      /**
       * Deletes an existing instance of the OrangeSubscribers smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(OrangeSubscribersCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the OrangeSubscribers smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(OrangeSubscribersCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the mintGiftNFT(axfer,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintGiftNft(args: MethodArgs<'mintGiftNFT(axfer,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(OrangeSubscribersCallFactory.mintGiftNft(args, params))
  }

  /**
   * Calls the redeemGiftNFT(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public redeemGiftNft(args: MethodArgs<'redeemGiftNFT(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(OrangeSubscribersCallFactory.redeemGiftNft(args, params))
  }

  /**
   * Calls the subscribe(axfer,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public subscribe(args: MethodArgs<'subscribe(axfer,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(OrangeSubscribersCallFactory.subscribe(args, params))
  }

  /**
   * Calls the getLatestTimestamp()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLatestTimestamp(args: MethodArgs<'getLatestTimestamp()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(OrangeSubscribersCallFactory.getLatestTimestamp(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<OrangeSubscribers['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get manager() {
        return OrangeSubscribersClient.getBinaryState(state, 'manager')
      },
      get oraAsaId() {
        return OrangeSubscribersClient.getIntegerState(state, 'oraAsaId')
      },
      get gs30d() {
        return OrangeSubscribersClient.getIntegerState(state, 'gs30d')
      },
      get gsy() {
        return OrangeSubscribersClient.getIntegerState(state, 'gsy')
      },
      get sp30d() {
        return OrangeSubscribersClient.getIntegerState(state, 'sp30d')
      },
      get spy() {
        return OrangeSubscribersClient.getIntegerState(state, 'spy')
      },
    }
  }

  public compose(): OrangeSubscribersComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintGiftNft(args: MethodArgs<'mintGiftNFT(axfer,uint8)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintGiftNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      redeemGiftNft(args: MethodArgs<'redeemGiftNFT(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.redeemGiftNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      subscribe(args: MethodArgs<'subscribe(axfer,uint8)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.subscribe(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLatestTimestamp(args: MethodArgs<'getLatestTimestamp()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLatestTimestamp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as OrangeSubscribersComposer
  }
}
export type OrangeSubscribersComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, MethodReturn<'bootstrap(uint64)void'>]>

  /**
   * Calls the mintGiftNFT(axfer,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintGiftNft(args: MethodArgs<'mintGiftNFT(axfer,uint8)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, MethodReturn<'mintGiftNFT(axfer,uint8)void'>]>

  /**
   * Calls the redeemGiftNFT(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  redeemGiftNft(args: MethodArgs<'redeemGiftNFT(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, MethodReturn<'redeemGiftNFT(axfer)void'>]>

  /**
   * Calls the subscribe(axfer,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  subscribe(args: MethodArgs<'subscribe(axfer,uint8)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, MethodReturn<'subscribe(axfer,uint8)void'>]>

  /**
   * Calls the getLatestTimestamp()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLatestTimestamp(args: MethodArgs<'getLatestTimestamp()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, MethodReturn<'getLatestTimestamp()uint64'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the OrangeSubscribers smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, undefined]>
    /**
     * Updates an existing instance of the OrangeSubscribers smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): OrangeSubscribersComposer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OrangeSubscribers smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, undefined]>
    /**
     * Deletes an existing instance of the OrangeSubscribers smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): OrangeSubscribersComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OrangeSubscribers smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): OrangeSubscribersComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): OrangeSubscribersComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<OrangeSubscribersComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<OrangeSubscribersComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type OrangeSubscribersComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type OrangeSubscribersComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
